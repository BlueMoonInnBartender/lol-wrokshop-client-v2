@import 'abstracts/variables';
//universal media mixin
@mixin media($width...) {
  @if length($width) == 1 {
    @media (max-width: nth($width, 1)) {
      @content;
    }
  }
  @if length($width) == 2 {
    @media (max-width: nth($width, 1)) and (min-width: nth($width, 2)) {
      @content;
    }
  }
}
@mixin tooltip {
  margin: 0;
  display: block;
  position: absolute;
  bottom: calc(100% + 2rem);
  left: 0;
  background-color: black;
  color: $color6;
  padding: 1.5rem;
  border: 2px solid $color6;
  &::after {
    content: '';
    position: absolute;
    background-color: inherit;
    border-bottom: 2px solid $color6;
    border-right: 2px solid $color6;
    left: 50%;
    transform: translate(-50%, 58%) rotateZ(45deg);
    bottom: 0;
    width: 20px;
    height: 20px;
  }
}

@mixin ability-card {
  min-width: 300px;
  max-width: 450px;
  @media(max-width: 1200px) {
    & {
      font-size: 1.5rem;
    }
  }
  @media(max-width: 450px) {
    & {
      font-size: 2rem;
    }
  }
  background-color: rgba(1, 1, 1, .6);
  padding: .2rem;
  margin: 1rem;
}

@mixin button2 {
  border: 2px solid $color4;
  background-color: transparent;
  padding: .6em .5em;
  font-size: 1em;
  &:first-child {
    margin-right: 1.5em;
  }
  &:hover {
    filter: hue-rotate(20deg) brightness(120%);
  }
}

@mixin hover-effect1 {
  &::after {
    content: '';
    display: block;
    background-color: white;
    width: calc(100%);
    height: 1px;
    transform: scale(0);
    transform-origin: right;
    transition: transform 200ms ease-in;
  }
  &:hover::after,
  &:focus::after {
    transform: scale(1);
    transform-origin: left;
  }
}

@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size) {
  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-font-size);
  $u4: unit($max-font-size);

  @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
    & {
      font-size: $min-font-size;
      @media screen and (min-width: $min-vw) {
        font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
      }
      @media screen and (min-width: $max-vw) {
        font-size: $max-font-size;
      }
    }
  }
}

@at-root {
  $name: glitch;
  $steps: 20;
  // We need two different ones
  @for $i from 1 through 2 {
    @keyframes #{$name}-anim-#{$i} {
      @for $i from 0 through $steps {
        $top: random(100);
        $bottom: random(101 - $top);
        #{percentage($i*(1/$steps))} {
          clip-path: inset(#{$top}% 0 #{$bottom}% 0);
        }
      }
    }
  }
}

@mixin glitch {
  position: relative;
  display: inline-block;
  &::after, &::before {
    color: inherit;
    font-size: inherit;
    font-weight: inherit;
    content: attr(data-text);
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
}

@mixin skewed-button($error-color: #c3073f) {
  text-transform: uppercase;
  transform: skew(-20deg);
  padding: .3rem .5rem;
  border: 2px solid $error-color;
  color: $error-color;
  background-color: black;
  & {
    span {
      display: inline-block;
      color: inherit;
      font-size: inherit;
      font-weight: inherit;
      transform: skew(20deg);
    }
  }
}

@mixin skewed-glitching {
  @include skewed-button;
  span {
    @include glitch;
  }
  &:hover {
    span {
      &::before {
        left: 2px;
        animation: glitch-anim-1 3s infinite linear alternate-reverse;
        background-color: black;
      }

      &::after {
        left: -2px;
        animation: glitch-anim-2 3s infinite linear alternate-reverse;
        background: black
      }
    }
  }
}
